// Lista 3 Ex. 1
CELULA *insere( CELULA  *lista, int valor){
  CELULA *nova = malloc(sizeof(CELULA));
  nova->prox = NULL;
  nova->valor = valor;
  lista->prox = nova;
  return nova;
}

CELULA *intercala( CELULA *lista1, CELULA *lista2 ){

    CELULA *aux = malloc(sizeof(CELULA));
    CELULA *lista3 = malloc(sizeof(CELULA));
    lista3->prox = NULL;
    aux = lista3;
    while( (lista1 != NULL) || (lista2 != NULL) ){  
      if (lista1 != NULL){
        lista3 = insere(lista3, lista1->valor);
        lista1 = lista1->prox;
      }
      if (lista2 != NULL){
        lista3 = insere(lista3 , lista2->valor);
        lista2 = lista2->prox;
      }
    }
    return aux;
}



// Lista 3 Ex. 2
void inserirNaListaDupla(CELULA ** lista, int valor) {
    CELULA *nova = malloc(sizeof(CELULA_DUPLA));
    nova->valor = valor;
    nova->anterior = NULL;
    nova->prox = NULL;

    if(*lista == NULL) {
        *lista = nova;
        return;
    }
    
    CELULA *aux = *lista;
    for(; aux->prox != NULL; aux = aux->prox);
    nova->anterior = aux;
    aux->prox = nova;
}

// Lista 3 Ex. 3
int simulaInspecao() {
    int horas = 8;
    int minutosTotal = horas * 60;
    
    int qtdTv = 0;
    int qtdTvsFixed = 0;
    int tempoConsertando = 0;
    for(int minutos = 1; minutos < minutosTotal; minutos++) {
        if(tempoConsertando == 4) {
            tempoConsertando = 0;
            qtdTvsFixed++;
            qtdTv--;
        } 
        if(minutos%3 == 0) {
            qtdTv++;
        }
        if(qtdTv >= 1) {
            tempoConsertando++;
        }
    }

    return qtdTvsFixed;
}

// Lista 3 Ex. 4
int simulaTTT(int v[], int topo) {
    int soma = 0;
    if(topo==0) return soma;
    for(; topo > 0; topo--) {
        if(v[topo] != 0) {
            soma += v[topo];
        }
    }
    return soma;
}