// Lista 1 Ex. 1
void inverteInteiro(int x) {
    printf("%d", x%10);
    if(x/10 == 0) return;
    inverteInt(x/10);
}

//Lista 1 Ex. 2
void describe(int n) {
    printf("%d ", n);
    if (n!=0) {
        describe(n - 1);
        printf("%d ", n);
    }
}

//Lista 1 Ex. 3
void inverterVetor(int v[], int n) {
    if(n <= 50) return;
    int aux = v[n-1];
    v[n-1] = v[100-n];
    v[100 - n] = aux;
    inverterVetor(v, n - 1);
}

// Lista 2 da Lista 1 Ex. 1
void concatena(CELULA** lista1, CELULA* lista2) { 
    if (*lista1 == NULL) { 
        *lista1 = lista2; 
        return; 
    }
    CELULA* aux = *lista1; 
    while (aux->prox != NULL) 
        aux = aux->prox;  
    aux->prox = lista2; 
} 

// Lista 2 da Lista 1 Ex. 2
void removeRepetidos(CELULA** lista) { 
    CELULA * aux = *lista;
    CELULA * ant = NULL;
    while (aux->prox != NULL) {
        if(ant == NULL || ant->valor != aux->valor) {
            ant = aux;
            aux = aux->prox;
        }
        else if(ant->valor == aux->valor) {
            aux = aux->prox;
            ant->prox = aux;
        }
    }
} 

// Lista 2 da Lista 1 Ex. 3
int* converte(int v[], int n) {
    CELULA * lst = malloc(8);
    lst->valor = v[0]; 
    lst->prox = NULL;
    CELULA * aux = lst; 
    for(int i=1; i<n ; i++) {
        CELULA * nova = malloc(8);
        nova->valor = v[i];
        aux->prox = nova;
        aux = nova;
    }
    return aux;
}

// Lista 2 da Lista 1 Ex. 4
CELULA *insere( CELULA  *lista, int valor){
  CELULA *nova = malloc(sizeof(CELULA));
  nova->prox = NULL;
  nova->valor = valor;
  lista->prox = nova;
  return nova;
}

CELULA *intercala( CELULA *lista1, CELULA *lista2 ){

    CELULA *aux = malloc(sizeof(CELULA));
    CELULA *lista3 = malloc(sizeof(CELULA));
    lista3->prox = NULL;
    aux = lista3;
    while( (lista1 != NULL) || (lista2 != NULL) ){
      if (lista1 != NULL){
        lista3 = insere(lista3, lista1->valor);
        lista1 = lista1->prox;
      }
      if (lista2 != NULL){
        lista3 = insere(lista3 , lista2->valor);
        lista2 = lista2->prox;
      }
    }
    return aux;
}